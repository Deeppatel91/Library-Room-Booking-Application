#docker-compose -p roomservice_comp3095 -f docker-compose.yml up -d --build
services:
  room-service:
    build:
      context: ./RoomService    # Path where the Dockerfile is located
      dockerfile: ./Dockerfile  # Specify Dockerfile if necessary
    container_name: room-service
    ports:
      - "8090:8090"             # Expose the application port to the host
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/RoomService
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: password
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - spring

  user-service:
    build:
      context: ./UserService    # Path where the Dockerfile for UserService is located
      dockerfile: ./Dockerfile  # Specify Dockerfile for user-service
    container_name: user-service
    ports:
      - "8054:8054"             # Expose UserService port 8044 to the host
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/UserService
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: password
      JWT_SECRET: 5367566B5970743373367639792F423F4528482B4D6251655468576D5A7134743788888
      JWT_EXPIRATION: 86400000
      SPRING_JPA_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect  # Explicitly set Hibernate dialect for PostgreSQL
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - spring

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: admin       # The PostgreSQL username
      POSTGRES_PASSWORD: password # The PostgreSQL password
      POSTGRES_MULTIPLE_DATABASES: RoomService,UserService  # Create multiple databases for both services
    ports:
      - "5432:5432"              # Expose the PostgreSQL port to the host
    volumes:
      - ./data/postgres:/var/lib/postgresql/data  # Persist PostgreSQL data locally
    networks:
      - spring
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin" ]
      interval: 30s
      timeout: 30s
      retries: 5


  pgadmin:
    image: dpage/pgadmin4:latest # Use the latest pgAdmin image
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com      # Default pgAdmin email for login
      PGADMIN_DEFAULT_PASSWORD: admin             # Default pgAdmin password
    ports:
      - "5055:80"              # Expose pgAdmin on port 5052 of the host
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - spring

networks:
  spring:
    driver: bridge
