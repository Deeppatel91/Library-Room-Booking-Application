#docker-compose -p gbc_eventbooking-21 -f docker-compose.yml up -d --build
version: '3.9'
services:
  keycloak:
    container_name: keycloak
    hostname: keycloak
    image: quay.io/keycloak/keycloak:24.0.1
    command: ["start-dev", "--import-realm"]
    environment:
      DB_VENDOR: postgres
      DB_ADDR: postgres-keycloak
      DB_DATABASE: keycloak
      DB_USER: admin
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
      ROOT_LOGLEVEL: DEBUG
      JBOSS_LOG_MANAGER_ROOT_LOGGER: DEBUG,stdout,FILE
    ports:
      - "8080:8080"
    volumes:
      - ./realms/:/opt/keycloak/data/import
    depends_on:
      postgres-keycloak:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://keycloak:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - spring

  postgres-keycloak:
    image: postgres:latest
    container_name: postgres-keycloak
    ports:
      - "5477:5432"
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      PGDATA: /var/lib/postgresql/data
    volumes:
      - ./data/keycloak:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - spring

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    image: api-gateway
    container_name: api-gateway
    ports:
      - "9000:9000"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER-URI: http://keycloak:8080/realms/spring-microservices-security-realm
    networks:
      - spring

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    image: notification-service
    container_name: notification-service
    ports:
      - "8085:8085"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER-URI: http://keycloak:8080/realms/spring-microservices-security-realm
    networks:
      - spring

  room-service:
    build:
      context: ./RoomService
      dockerfile: Dockerfile
    container_name: room-service
    ports:
      - "8090:8090"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/RoomService
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: password
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - spring

  user-service:
    build:
      context: ./UserService
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "8054:8054"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/UserService
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_JPA_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - spring

  booking-service:
    build:
      context: ./BookingService
      dockerfile: Dockerfile
    container_name: booking-service
    ports:
      - "8060:8060"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATA_MONGODB_URI: mongodb://admin:password@mongodb:27017/BookingService?authSource=admin
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - spring


  event-service:
    build:
      context: ./EventService
      dockerfile: Dockerfile
    container_name: event-service
    ports:
      - "8062:8062"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATA_MONGODB_URI: mongodb://admin:password@mongodb:27017/EventService?authSource=admin
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - spring

  approval-service:
    build:
      context: ./ApprovalService
      dockerfile: Dockerfile
    container_name: approval-service
    ports:
      - "8064:8064"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATA_MONGODB_URI: mongodb://admin:password@mongodb:27017/ApprovalService?authSource=admin
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - spring

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: RoomService
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    networks:
      - spring
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 30s
      timeout: 30s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5057:80"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - spring

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - mongodb_data:/data/db
    networks:
      - spring
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    ports:
      - "8065:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_URL: mongodb://admin:password@mongodb:27017/
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - spring

  zookeeper:
    image: confluentinc/cp-zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - spring

  broker:
    image: confluentinc/cp-kafka:7.5.0
    container_name: broker
    ports:
        - "9092:9092"
        - "29092:29092"
    environment:
        KAFKA_BROKER_ID: 1
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT, PLAINTEXT_HOST:PLAINTEXT
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://host.docker.internal:9092
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
        zookeeper:
          condition: service_started
    healthcheck:
        test: [ "CMD-SHELL", "kafka-broker-api-versions --bootstrap-server broker:29092 || exit 1" ]
        interval: 10s
        timeout: 5s
        retries: 5
    networks:
        - spring

  kafka-ui:
      image: provectuslabs/kafka-ui:latest
      container_name: kafka-ui
      ports:
        - "8086:8080"
      environment:
        KAFKA_CLUSTERS_NAME: local
        KAFKA_CLUSTERS_BOOTSTRAPSERVERS: broker:29092
        DYNAMIC_CONFIG_ENABLED: 'true'
      depends_on:
        broker:
          condition: service_healthy
      networks:
        - spring

networks:
  spring:
    driver: bridge

volumes:
  postgres_data:
  mongodb_data:
